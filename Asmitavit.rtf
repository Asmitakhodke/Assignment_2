/******************************************************************************

                 SLOT BOOKING SERVICE PROGRAM CODE (C Program)

*******************************************************************************/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct book
{
  char code[20];
  char name[20];
  char date[20];
  int cost;
  }b;
int slot;
void insert_details();                                                      //for inserting slot details
void viewAll();                                                             // for view all slots
void find();                                                                // for finding data
void book_slot();                                                           //for booking slots
void old_record();                                                          //for view old records of users,booked
void main()
{
    int a;
{
 printf("\n====================================================================");
 printf("\n");
 printf("\t slot booking ");
 printf("\n");
 printf("\n====================================================================");
 printf("\nPress <1> Insert allslots");
 printf("\nPress <2> View All slots");
 printf("\nPress <3> Find Slot ");
 printf("\nPress <4> Book Slot");
 printf("\nPress <5> View All Bookings");
 printf("\nPress <0> Exit ");
 printf("\nEnter your Choice ::");
 scanf("%d",&a);
     switch (a)
   {
     case 1 :
      insert_details();
     break;
     case 2:
      viewAll();
     break;
     case 3:
      find();
     break;
     case 4:
      book_slot();
     break;
     case 5:
      old_record();
     break;
     case 0:
      exit(0);
     break;
      default:
      printf("Wrong choice !");
     break;
   }
 }while(a!=0);
}
void insert_details()
{
 FILE *fp;
 struct book b;
 printf("Enter slot code :- ");
 scanf("%s",b.code);
 printf("Enter name :- ");
 scanf("%s",b.name);
 printf("Enter  Date:- ");
 scanf("%s",b.date);
 printf("Enter  Price:- ");
 scanf("%d",&b.cost);
 fp=fopen("data.txt","a");
      if(fp == NULL)
{
     printf("FIle not Found");
}
     else
{
     fprintf(fp,"%s %s %s %d \\n",b.code,b.name,b.date,b.cost);
     printf("Record insert Sucessfull");
}
     printf("\\n");
     fclose(fp);
}
void find()                                 //find details of slots
{
 struct book b;
 FILE *fp;
 char a[20];
 printf("Enter slot code :");
 scanf("%s",a);
 fp = fopen("data.txt","r");
 if(fp == NULL)
{
 printf("file does not found !");
 exit(1);
 }
 else
{
 while(getc(fp) != EOF)
{
 fscanf(fp,"%s %s %s %d",b.code,b.name,b.date,&b.cost);
 if(strcmp(b.code,a) == 0)
{
 printf("%s / %s / %s / %d\\n",b.code,b.name,b.date,b.cost);
 printf("\n Record Found\n");
 printf("\n\t\tCode ::%s",b.code);
 printf("\n\t\tslot name ::%s",b.name);
 printf("\n\t\tslot date ::%s",b.date);
 printf("\n\t\tprice  ::%d",b.cost);
break;
}
}
}
  fclose(fp);
}
 void viewAll()
{
 char ch;
 FILE *fp;
 fp = fopen("data.txt","r");
 if(fp == NULL)
{
 printf("file does not found !");
 exit(1);
 }
 else
{
 system("clear");
 while( ( ch = fgetc(fp) ) != EOF )
 printf("%c",ch);
}
 fclose(fp);
}
 void book_slot()                            //for booking slot
{
 struct book b;
 FILE *fp;
 FILE *ufp;
 int total_slot,mobile,total_amount;
 char name[20];
 char a;                                    //used in display all slots
 char slot_code[20];                        //for searching
 
 fp = fopen("data.txt","r");                // disply all slots by default for slot code
 if(fp == NULL)
{
 printf("file does not found !");
 exit(1);
 }
 else
{
 system("cls");
 while( ( a = fgetc(fp) ) != EOF )
 printf("%c",a);
}
 fclose(fp);
 //display ends
 printf("\\n For Booking Choice (Enter Code First Letter or number)\\n");
 printf("\\n Enter slot code :");
 scanf("%s",slot_code);
 //system("clear");
 fp = fopen("data.txt","r");
 if(fp == NULL)
{
 printf("file does not found !");
 exit(1);
 }
 else
{
 while(getc(fp) != EOF)
{
 fscanf(fp,"%s %s %s %d",b.code,b.name,b.date,&b.cost);
 if(strcmp(b.code,slot_code) == 0)
{
printf("%s / %s / %s / %d\\n",b.code,b.name,b.date,b.cost);
 printf("\n Record Found\n");
 printf("\n\t\tCode ::%s",b.code);
 printf("\n\t\tslot name ::%s",b.name);
 printf("\n\t\tdate name ::%s",b.date);
 printf("\n\t\tPrice ::%d",b.cost);
}
}
}
 printf("\n* Fill Details  *");
 printf("\n your name :");
 scanf("%s",name);
 printf("\n mobile number :");
 scanf("%d",&mobile);
 printf("\n Total number of slots :");
 scanf("%d",&total_slot);
 total_amount = b.cost * total_slot;
 printf("\n ***** ENJOY SLOT BOOKING ****\\n");
 printf("\n\t\tname : %s",name);
 printf("\n\t\tmobile Number : %d",mobile);
 printf("\n\t\tslot name : %s",b.name);
 printf("\n\t\tTotal slots : %d",total_slot);
 printf("\n\t\tcost per slot : %d",b.cost);
 printf("\n\t\tTotal Amount : %d",total_amount);
 ufp=fopen("oldBookings.txt","a");
 if(ufp == NULL)
{
 printf("FIle not Found");
}
 else
{
 fprintf(ufp,"%s %d %d %d %s %d \\n",name,mobile,total_slot,total_amount,b.name,b.cost);
 printf("\n Record insert Sucessfull to the old record file");
}
 printf("\n");
 fclose(ufp);
 fclose(fp);
}

void old_record()                 //for view all user Booking
{
 char ch;
 FILE *fp;
//system("clear");
 fp = fopen("oldBookings.txt","r");
 if(fp == NULL)
{
 printf("file does not found !");
 exit(1);
 }
 else
{
 system("clear");
 while( ( ch = fgetc(fp) ) != EOF )
 printf("%c",ch);
}
 fclose(fp);
}
 OUTPUT:          1)Enter Slot code ex:    12:00-1:00
                  2)Give name of slot:     India
                  3)Enter date:            14/06/20
                  4)Price of booking :     2
                  
 Inserted data of slot booking will be stored in    :  data.txt
 and Previous data of slot booking will be stored in:  OldBooking.txt
 
 
/******************************************************************************

                          C program to print CALENDER OF GIVEN YEAR

 *******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
int frst_DayOfWeek(int yr)
{
    int day;
    day = (((yr - 1) * 365) + ((yr - 1) / 4) - ((yr - 1) / 100) + ((yr) / 400) + 1) % 7;
    return day;
}
int main()
{
    int yr,day=0,dayInMonth,weekDay=0,startingDay,month;
    printf("Enter your desired year: ");
    scanf("%d",&yr);
   char*months[]=\{"January","February","March","April","May","June","July","August","September","October","November","December"\};
    int monthDays[]=\{31,28,31,30,31,30,31,31,30,31,30,31\};
    if((yr%4==0  &&  yr%100!=0)  ||  yr%400==0)
    {
        monthDays[1]=29;
    }
    startingDay=frst_DayOfWeek(yr);
    for(month=0;month<12;month++)
    {
        dayInMonth=monthDays[month]+1;
        printf("\\n\\n------------------%s----------------",months[month]);
        printf("\\n  Sun   Mon  Tue  Wed  Thurs Fri  Sat\\n");
        for(weekDay=0;weekDay<startingDay;weekDay++)
        {
           printf("     ");
        }
        for(day=1;day<dayInMonth;day++)
        {
            printf("%5d",day);
            if(++weekDay>6)
            {
                printf("\\n");
                weekDay=0;
            }
            startingDay=weekDay;
        }
    }
}

/******************************************************************************

 Python Code to find meeting time slots where all participants are available
 
/******************************************************************************

user_1 = ["4-16","18-24"]
user_2 = ["2-14","17-24"]
user_3 = ["6-8","12-20"]
user_4 = ["10-22"]
allPeople = [user_1, user_2, user_3, user_4]
allTimeSlots = []
for j in range(0,24):
    allTimeSlots.append(str(j) + "-" + str(j+1))
commonFreeSlots = []
for j in range(0,len(allTimeSlots)):
    timeSlotOk = True
    for k in range(0,len(allPeople)):
        person_free_slots = parseSlot(allPeople[k])
        if allTimeSlots[j] not in person_free_slots:
            timeSlotOk = False
            break
    if timeSlotOk:
        commonFreeSlots.append(allTimeSlots[j])
def parseSlot(list_of_slots):
    result = []
    for j in range(0,len(list_of_slots)):
        start_time = int(list_of_slots[j].split("-")[0])
        end_time = int(list_of_slots[j].split("-")[1])
        k = 0
        while (start_time + k) < end_time:
            result.append(str(start_time+k) + "-" + str(start_time+k+1))
            k += 1
    return result
}


OUTPUT:   ['12-13', '13-14', '18-19', '19-20']
